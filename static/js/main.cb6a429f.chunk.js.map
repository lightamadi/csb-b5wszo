{"version":3,"sources":["App.js","index.js"],"names":["TestLevels","level","title","App","_useState","useState","_useState2","_slicedToArray","selectedLevel","setSelectedLevel","_useState3","_useState4","questions","setQuestions","_useState5","_useState6","currentQuestionIndex","setCurrentQuestionIndex","_useState7","_useState8","score","setScore","_useState9","_useState10","showResults","setShowResults","_useState11","_useState12","loading","setLoading","_useState13","_useState14","error","setError","_useState15","_useState16","selectedAnswer","setSelectedAnswer","useEffect","fetchQuestions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","updatedQuestions","wrap","_context","prev","next","fetch","concat","sent","ok","Error","statusText","json","results","length","map","question","allAnswers","_toConsumableArray","incorrect_answers","correct_answer","_objectSpread","answers","sort","Math","random","t0","stop","_x","apply","arguments","_jsxs","children","_jsx","index","onClick","handleLevelSelection","style","backgroundColor","message","class","dangerouslySetInnerHTML","__html","answer","handleAnswerSelection","currentQuestion","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.cb6a429f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nconst TestLevels = [\n  { level: \"easy\", title: \"Easy\" },\n  { level: \"medium\", title: \"Medium\" },\n  { level: \"hard\", title: \"Hard\" }\n];\n\nexport default function App() {\n  const [selectedLevel, setSelectedLevel] = useState(\"easy\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  useEffect(() => {\n    if (selectedLevel) {\n      setLoading(true);\n      setError(null);\n      fetchQuestions(selectedLevel);\n    }\n  }, [selectedLevel]);\n\n  const handleLevelSelection = (level) => {\n    setSelectedLevel(level);\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setShowResults(false);\n    setScore(0);\n  };\n\n  const fetchQuestions = async (level) => {\n    try {\n      const response = await fetch(\n        `https://opentdb.com/api.php?amount=50&difficulty=${level}`\n      );\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      const data = await response.json();\n      if (!data.results.length) {\n        throw new Error(\"No questions found\");\n      }\n      const updatedQuestions = data.results.map((question) => {\n        const allAnswers = [\n          ...question.incorrect_answers,\n          question.correct_answer\n        ];\n        return {\n          ...question,\n          correct_answer: question.correct_answer,\n          answers: allAnswers.sort(() => Math.random() - 0.5)\n        };\n      });\n      setQuestions(updatedQuestions);\n      setLoading(false);\n    } catch (e) {\n      setError(e);\n      setLoading(false);\n    }\n  };\n\n  const handleAnswerSelection = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleSubmit = () => {\n    if (selectedAnswer === null) {\n      setError(\"Please select an answer\");\n      return;\n    }\n    const currentQuestion = questions[currentQuestionIndex];\n    if (selectedAnswer === currentQuestion.correct_answer) {\n      setScore(score + 1);\n    }\n    if (currentQuestionIndex === questions.length - 1) {\n      setShowResults(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n    setSelectedAnswer(null);\n  };\n  return (\n    <div>\n      <h1>IQ Test</h1>\n      <div>\n        {TestLevels.map((level, index) => (\n          <button\n            key={index}\n            onClick={() => handleLevelSelection(level.level)}\n            style={{\n              backgroundColor:\n                selectedLevel === level.level ? \"#244624\" : \"#367537\"\n            }}\n          >\n            {level.title}\n          </button>\n        ))}\n      </div>\n      {loading && <p>Loading...</p>}\n      {error && (\n        <p>An error occurred while fetching questions: {error.message}</p>\n      )}\n      {questions.length > 0 ? (\n        showResults ? (\n          <div>\n            <h2>Results</h2>\n            <p>\n              Score: {score}/{questions.length}\n            </p>\n          </div>\n        ) : (\n          <div class=\"questionDiv\">\n            <h2>Question {currentQuestionIndex + 1}</h2>\n            {questions[currentQuestionIndex] && (\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: questions[currentQuestionIndex].question\n                }}\n              ></div>\n            )}\n            {questions[currentQuestionIndex] &&\n            questions[currentQuestionIndex].answers ? (\n              <div>\n                <ul>\n                  {questions[currentQuestionIndex].answers.map(\n                    (answer, index) => (\n                      <li key={index}>\n                        <button\n                          onClick={() => handleAnswerSelection(answer)}\n                          style={{\n                            backgroundColor:\n                              selectedAnswer === answer ? \"#00004c\" : \"\"\n                          }}\n                        >\n                          {answer}\n                        </button>\n                      </li>\n                    )\n                  )}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        )\n      ) : null}\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}